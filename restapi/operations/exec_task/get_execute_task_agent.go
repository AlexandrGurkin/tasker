// Code generated by go-swagger; DO NOT EDIT.

package exec_task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetExecuteTaskAgentHandlerFunc turns a function with the right signature into a get execute task agent handler
type GetExecuteTaskAgentHandlerFunc func(GetExecuteTaskAgentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetExecuteTaskAgentHandlerFunc) Handle(params GetExecuteTaskAgentParams) middleware.Responder {
	return fn(params)
}

// GetExecuteTaskAgentHandler interface for that can handle valid get execute task agent params
type GetExecuteTaskAgentHandler interface {
	Handle(GetExecuteTaskAgentParams) middleware.Responder
}

// NewGetExecuteTaskAgent creates a new http.Handler for the get execute task agent operation
func NewGetExecuteTaskAgent(ctx *middleware.Context, handler GetExecuteTaskAgentHandler) *GetExecuteTaskAgent {
	return &GetExecuteTaskAgent{Context: ctx, Handler: handler}
}

/*GetExecuteTaskAgent swagger:route GET /executeTask/{agent} execTask getExecuteTaskAgent

Get task for executiton

*/
type GetExecuteTaskAgent struct {
	Context *middleware.Context
	Handler GetExecuteTaskAgentHandler
}

func (o *GetExecuteTaskAgent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetExecuteTaskAgentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
