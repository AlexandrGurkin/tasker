// Code generated by go-swagger; DO NOT EDIT.

package set_result

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostSetResultIDHandlerFunc turns a function with the right signature into a post set result ID handler
type PostSetResultIDHandlerFunc func(PostSetResultIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostSetResultIDHandlerFunc) Handle(params PostSetResultIDParams) middleware.Responder {
	return fn(params)
}

// PostSetResultIDHandler interface for that can handle valid post set result ID params
type PostSetResultIDHandler interface {
	Handle(PostSetResultIDParams) middleware.Responder
}

// NewPostSetResultID creates a new http.Handler for the post set result ID operation
func NewPostSetResultID(ctx *middleware.Context, handler PostSetResultIDHandler) *PostSetResultID {
	return &PostSetResultID{Context: ctx, Handler: handler}
}

/*PostSetResultID swagger:route POST /setResult/{id} setResult postSetResultId

Set result

*/
type PostSetResultID struct {
	Context *middleware.Context
	Handler PostSetResultIDHandler
}

func (o *PostSetResultID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostSetResultIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
