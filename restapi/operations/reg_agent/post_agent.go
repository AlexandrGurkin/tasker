// Code generated by go-swagger; DO NOT EDIT.

package reg_agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAgentHandlerFunc turns a function with the right signature into a post agent handler
type PostAgentHandlerFunc func(PostAgentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAgentHandlerFunc) Handle(params PostAgentParams) middleware.Responder {
	return fn(params)
}

// PostAgentHandler interface for that can handle valid post agent params
type PostAgentHandler interface {
	Handle(PostAgentParams) middleware.Responder
}

// NewPostAgent creates a new http.Handler for the post agent operation
func NewPostAgent(ctx *middleware.Context, handler PostAgentHandler) *PostAgent {
	return &PostAgent{Context: ctx, Handler: handler}
}

/*PostAgent swagger:route POST /agent regAgent postAgent

Register new agent

*/
type PostAgent struct {
	Context *middleware.Context
	Handler PostAgentHandler
}

func (o *PostAgent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAgentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
